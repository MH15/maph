{"version":3,"sources":["core/maph.js"],"names":["scene","THREE","Scene","background","Color","renderer","WebGLRenderer","setSize","window","innerWidth","innerHeight","document","body","appendChild","domElement","geometry","SphereGeometry","material","MeshBasicMaterial","color","cube","Mesh","add","AxesHelper","camera","PerspectiveCamera","position","set","controls","OrbitControls","enableDamping","dampingFactor","enableZoom","enablePan","screenSpacePanning","minDistance","maxDistance","maxPolarAngle","Math","PI","LineBasicMaterial","linewidth","Geometry","x","vertices","push","Vector3","cos","line2","Line","geom","r","z","v1","v2","v3","v4","faces","Face3","computeFaceNormals","object","MeshNormalMaterial","side","DoubleSide","stats","Stats","showPanel","dom","removeEntity","name","selectedObject","getObjectByName","remove","animate","GraphFunctionR1","equation","speed","displayOutline","fObj","Formula","evaluate","line0","update","GraphFunctionR2","y","onload","graphR1","gui","dat","GUI","begin","requestAnimationFrame","render","end"],"mappings":"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","file":"maph.f5967322.map","sourceRoot":"..","sourcesContent":["// maph.js\n\n\n\n\n\n\n\n\nvar scene = new THREE.Scene();\nscene.background = new THREE.Color( 0xcccccc );\n// scene.fog = new THREE.FogExp2( 0xcccccc, 0.002 );\n\n\n\nvar renderer = new THREE.WebGLRenderer();\nrenderer.setSize( window.innerWidth, window.innerHeight );\ndocument.body.appendChild( renderer.domElement );\n\nvar geometry = new THREE.SphereGeometry( 0.5, 10, 10 );\nvar material = new THREE.MeshBasicMaterial( { color: 0x000000 } );\nvar cube = new THREE.Mesh( geometry, material );\nscene.add( cube );\n\n\t\t\t\t// helper\n\t\t\t\tscene.add( new THREE.AxesHelper( 200 ) );\n\n\ncamera = new THREE.PerspectiveCamera( 60, window.innerWidth / window.innerHeight, 1, 1000 );\ncamera.position.set( 40, 5, 30 );\n\n// controls\n\ncontrols = new THREE.OrbitControls( camera, renderer.domElement );\n\n//controls.addEventListener( 'change', render ); // call this only in static scenes (i.e., if there is no animation loop)\n\ncontrols.enableDamping = true; // an animation loop is required when either damping or auto-rotation are enabled\ncontrols.dampingFactor = 0.25;\ncontrols.enableZoom = true;\ncontrols.enablePan = true;\n\ncontrols.screenSpacePanning = false;\n\ncontrols.minDistance = 10;\ncontrols.maxDistance = 500;\n\ncontrols.maxPolarAngle = Math.PI;\n\n\n// // testing the first quadratic line\n// //create a blue LineBasicMaterial\n// var material = new THREE.LineBasicMaterial( { color: 0x0000ff, linewidth:2 } );\n// var geometry = new THREE.Geometry();\n// for(let x = -100; x < 100; x+=0.1) {\n// \tgeometry.vertices.push(new THREE.Vector3( x, Math.pow(x,2), 0) );\n\n// }\n// var line0 = new THREE.Line( geometry, material );\n// scene.add( line0 );\n\n// // testing the first cubed line\n// //create a blue LineBasicMaterial\n// var material = new THREE.LineBasicMaterial( { color: 0xf00000, linewidth:2 } );\n// var geometry = new THREE.Geometry();\n// for(let x = -100; x < 100; x+=0.1) {\n// \tgeometry.vertices.push(new THREE.Vector3( x, Math.pow(x,3), 0) );\n\n// }\n// var line1 = new THREE.Line( geometry, material );\n// scene.add( line1 );\n\n// testing the first cosine line\n//create a blue LineBasicMaterial\nvar material = new THREE.LineBasicMaterial( { color: 0x00a400, linewidth:2 } );\nvar geometry = new THREE.Geometry();\nfor(let x = -100; x < 100; x+=0.01) {\n\tgeometry.vertices.push(new THREE.Vector3( x, 1*Math.cos(x), 0) );\n\n}\nvar line2 = new THREE.Line( geometry, material );\nscene.add( line2 );\n\n\n// meshing test\nvar geom = new THREE.Geometry(); \n\n// resolution of mesh\nlet r = 1;\nfor(let z = 0; z < 20; z+= r) {\n\tfor(let x = 0; x < 30; x += 1) {\n\t\tvar v1 = new THREE.Vector3(x,Math.cos(x),z);\n\t\tvar v2 = new THREE.Vector3(x,Math.cos(x),z+10);\n\t\tvar v3 = new THREE.Vector3(x+r,Math.cos(x+r),z+10);\n\t\tvar v4 = new THREE.Vector3(x+r,Math.cos(x+r),z);\n\t\t// console.log(v1)\n\n\t\tgeom.vertices.push(v1);\n\t\tgeom.vertices.push(v2);\n\t\tgeom.vertices.push(v3);\n\t\tgeom.vertices.push(v4);\n\n\t\tgeom.faces.push( new THREE.Face3( (x*4) + 0, (x*4) + 1, (x*4) + 2 ) );\n\t\tgeom.faces.push( new THREE.Face3( (x*4) + 0, (x*4) + 3, (x*4) + 2 ) );\n\t\tgeom.computeFaceNormals();\n\n\t}\n\t\tgeom.computeFaceNormals();\n}\n\nvar object = new THREE.Mesh( geom, new THREE.MeshNormalMaterial({side: THREE.DoubleSide}) );\n\n// object.position.z = -10;//move a bit back - size of 500 is a bit big\n// object.rotation.y = -Math.PI * .5;//triangle is pointing in depth, rotate it -90 degrees on Y\n\nscene.add(object);\n\n\n\n// stats monitoring\nvar stats = new Stats();\nstats.showPanel( 0 ); // 0: fps, 1: ms, 2: mb, 3+: custom\ndocument.body.appendChild( stats.dom );\n\n\nfunction removeEntity(name) {\n    var selectedObject = scene.getObjectByName(name);\n    scene.remove( selectedObject );\n    animate();\n}\n\n\n// dat controller\nfunction GraphFunctionR1 () {\n\tthis.equation = 'x^2';\n\tthis.speed = 0.8;\n\tthis.displayOutline = false;\n\n\t// Define render logic ...\n\n\t// TODO: auto-update the scene when the equation changes\n\tvar fObj = new Formula(this.equation)\n\n\tvar material = new THREE.LineBasicMaterial( { color: 0x0000ff, linewidth:2 } );\n\tvar geometry = new THREE.Geometry();\n\tfor(let x = -100; x < 100; x+=0.1) {\n\t\tgeometry.vertices.push(new THREE.Vector3( x, fObj.evaluate({x:x}), 0) );\n\n\t}\n\tvar line0 = new THREE.Line( geometry, material );\n\tline0.name = \"formula\"\n\tscene.add( line0 );\n\n\tthis.update = () => {\n\t\tremoveEntity(\"formula\")\n\t\tvar fObj = new Formula(this.equation)\n\n\t\tvar material = new THREE.LineBasicMaterial( { color: 0x0000ff, linewidth:2 } );\n\t\tvar geometry = new THREE.Geometry();\n\t\tfor(let x = -100; x < 100; x+=0.1) {\n\t\t\tgeometry.vertices.push(new THREE.Vector3( x, fObj.evaluate({x:x}), 0) );\n\n\t\t}\n\t\tvar line0 = new THREE.Line( geometry, material );\n\t\tline0.name = \"formula\"\n\t\tscene.add( line0 );\n\n\t}\n\n};\n\n// dat controller\nfunction GraphFunctionR2 () {\n\tthis.equation = 'x*y';\n\n\t// Define render logic ...\n\n\t// TODO: auto-update the scene when the equation changes\n\tvar fObj = new Formula(this.equation)\n\n\tvar material = new THREE.LineBasicMaterial( { color: 0x0000ff, linewidth:1 } );\n\tvar geometry = new THREE.Geometry();\n\tfor(let x = -100; x < 100; x+=.1) {\n\t\tfor(let y = -100; y < 100; y += .1) {\n\t\t\t\tgeometry.vertices.push(new THREE.Vector3( x, y, fObj.evaluate({x:x, y:y})) );\n\t\t\t}\n\t}\n\tvar line0 = new THREE.Line( geometry, material );\n\tline0.name = \"formula\"\n\tscene.add( line0 );\n\n\tthis.update = () => {\n\t\tremoveEntity(\"formula\")\n\t\tvar fObj = new Formula(this.equation)\n\n\t\tvar material = new THREE.LineBasicMaterial( { color: 0x0000ff, linewidth:1 } );\n\t\tvar geometry = new THREE.Geometry();\n\t\tfor(let x = -100; x < 100; x+=.1) {\n\t\t\tfor(let y = -100; y < 100; y += .1) {\n\t\t\t\tgeometry.vertices.push(new THREE.Vector3( x, y, fObj.evaluate({x:x, y:y})) );\n\t\t\t}\n\t\t}\n\t\tvar line0 = new THREE.Line( geometry, material );\n\t\tline0.name = \"formula\"\n\t\tscene.add( line0 );\n\n\t}\n\n};\n\nwindow.onload = function() {\n\tlet graphR1 = new GraphFunctionR1();\n\t// let graphR2 = new GraphFunctionR2();\n\tvar gui = new dat.GUI();\n\tgui.add(graphR1, 'equation');\n\tgui.add(graphR1, 'update');\n\t// gui.add(graphR2, 'equation');\n\t// gui.add(graphR2, 'update');\n\n};\n    \n\n\n\nfunction animate() {\n\tstats.begin()\n\trequestAnimationFrame( animate );\n\tcontrols.update()\n\trenderer.render( scene, camera );\n\tstats.end()\n}\nanimate();"]}